
World featutes...


# characters

# dialog

  location :bar do
    character :barman
  end

  charcter :barman do

    description "A burly barman stands behind the bar busily cleaning and stocking."

    exclusion :feeling, :happy, :grumpy    # :default is :happy

    dialog :welcome do
      text   "The barman looks up from his work."
      dialog happy:  :happy_welcome,
             grumpy: :grumpy_welcome
    end

    dialog :happy_welcome do
      text "Welcome stranger."
      say( :greet  ) { text "Howdy!"       ; reply :serve    } 
      say( :demand ) { text "Whiskey now!" ; reply :no_serve }
    end

    dialog :grumpy_welcome do
      text "We're closed!"
      say( :demand ) { text "Whiskey now!"          ; reply :no_serve }
      say( :pay    ) { text "I'll buy you one too." ; reply :serve    }
       

    dialog :serve do
      text "What can I get you?"
      say( :scot  ) { text "Whiskey, Scottish." ; reply :no_serve }
      say :irish do
        text "Whiskey, Irish."
        reply dialog :enjoy do
          text "This is good stuff, enjoy!" 
        end
      end
    end

    dialog( :serve ) { text "We're all out, feck off!"   }

  end




# actions

  action.execute #=> { 
    result:   :symbol,                           # from result exclusion 
    describe: 'text'                             # first (only) matching symbol
    execution: return_value_from_execution_block
  }
 
  action.execute #=> { 
    result:   [ :symbol1, :symbol2, :symbol3 ]   # from result group
    describe: [ 'text1', 'text2', 'text3' ]      # all true/truthy members 
    execution: return_value_from_execution_block
  }
 
# attributes

  attribute returns whole attribute hash
  attribute.render returns array of values with truthy keys

    group weapons: [ :sword, :knife, :rock, :fists ]   # hash - key will be group name, value an array of symbols for members
    group :weapons, [ :sword, :knife, :rock, :fists ]  # symbol will be group name, array of symbols for members
ok    group :weapons, :sword, :knife, :rock, :fists      # symbols, first will be group name, rest will be members
    
    group stats: [ speed: 10, charisma: 20, strength: 30 ]  # defaults like attributes (these are attributes)
ok    group :stats, speed: 10, charisma: 20, strength: 30     # ditto

ok    exclusion passable: , :open, :close 
    exclusion light: [ :dark, :dim, :bright ]
    exclusion temperature: [ :cold, :cool, :warm, :hot ]

# descriptions (an attribute)
  
  displayed everytime a location is visited...

    description 'string'

  full description (short + long) displayed first visit
  short description displayed on subsequent visit + ellipses to expand long description on demand

    description short: "...", long: "..."

  may depend on location state ?
    
    description bright: '...', cold: '...'  
    # is :bright, "........."
    # is :cold,  "........."

# openable 

  open

    default is open
    way: player can go
    container: player can see inside

  closed (!open)

    specify with 'closed' or 'open false / open no'
    way: player cannot go
    way: is closed without 'to' (wrong-way)
    container: player cannot see inside

  condition

    must be true to open
    a proc/lambda 
    'locked' is just closed that has a key condition for opening
    action tests condition to try to open
    response for condition state/progress

# visiblty

  visible

    default is visible
    description will be displayed

  invisible (!visible)

    specify with 'invisible' or 'visible false / visible no'
    description will not be displayed
    items will not be counted, etc..

# location 

  location :here, name: 'Home', description: 'cosy'

  locations do
    home   name: 'Home',     description: 'Cosy'
    yard   name: 'Garden',   description: 'Green'
    cellar name: 'Basement', description: 'Damp'
  end

# way

  way :door, to: :other_location, description: 'Big'

  ways do
    east to: :china,     name: 'slow boat'
    west to: :wild_west, name: 'fast horse'
    up   to: :sky,       name: 'balloon'
    down to: :pit,       name: 'hole'
  end

  absolute directions
  - north, south, east, west, high, low

  relative directions
  - forward, back, left, right, up, down

# items

  item :id, name: 'Thing', description: "...", detail: "..."

  mass assignment...

    items do
      thing  name: 'Thing', description: "..."
      gadget name: 'Device', description: "..."
      key    name: 'Gold key'
    end

  may be examined ?

    longer description when examined
    detail "....."

  may know their relation to other items ?

    if item.contains? :water
    if item.near? :monster
    if item.on? :desk
    if item.in? :box

  # items can relate to other items ?....
  #   contains / contained
  #   before / behind
  #   on / under
  #   above / below
  #   near / far
  # module for this 'Relation' feature ?

end

# can locations, items be subclassed in DSL ?

class Vase < Item
  attributes :small
end

vase :default do
  name 'Vase'
  attributes 
item :vase do
  description "a vase"
  aspect :small, :light
end

vase :blue_vase do
  aspect :blue
end

vase :red_vase do
  aspect :red
end

# is this more like prototyping than subclassing ?

