
- def render_example example
  - unless example[:hide]
    - haml_tag :div do
      - haml_tag :p do
        - haml_tag :strong, example[:heading] 
      - haml_tag :p, example[:introduction]
      - haml_tag :p, example[:before_codes]
      - render_codes example[:codes]
      - haml_tag :p, example[:after_codes]
      - haml_tag :p, example[:before_results]
      - render_results example[:results]
      - haml_tag :p, example[:after_results]
      - haml_tag :p, example[:conclusion]

- def render_examples examples
  - if examples && !examples.empty?
    - examples.each do |example|
      - render_example example

- def render_code code
  - unless code[:hide]
    - haml_tag :div do
      - haml_tag :p, code[:before]
      - haml_tag :pre, "<code>#{preserve(code[:code])}</code>"
      - haml_tag :p, code[:after] 

- def render_codes codes
  - if codes && !codes.empty?
    - codes.each do |code|
      - render_code code

- def render_result result
  - unless result[:hide]
    - haml_tag :div do
      - haml_tag :p, result[:before]
      - haml_tag :pre, "<code>#{result[:code]} #{' #=> ' + result[:value].to_s if result[:value]}</code>"
      - haml_tag :p, result[:after] 

- def render_results results
  - if results && !results.empty?
    - results.each do |result|
      - render_result result

- def render_group group
  - unless group[:hide]
    - haml_tag :div do
      - haml_tag :h1, group[:heading]
      - haml_tag :p, group[:introduction]
      - render_examples group[:examples]
      - render_groups group[:groups]
      - haml_tag :p, group[:conclusion]

- def render_groups groups
  - if groups && !groups.empty?
    - groups.each do |group|
      - render_group group

%html

  %head
    %meta{ charset: 'utf-8' }
    %meta{ 'http-equiv' => "X-UA-Compatible", content: "chrome=1" }
    %meta{ name: "description", content: "#{specdoc[:groups].first[:title]} : #{specdoc[:groups].first[:tagline]}" }
    %link{ rel: "stylesheet", type: "text/css", media: "screen", href: "stylesheets/stylesheet.css" }
    %title= specdoc[:groups].first[:title]

  %body

    %div#header_wrap.outer
      %header.inner
        %a#forkme_banner{ href: specdoc[:groups].first[:url] } View on GitHub
        %h1#project_title= specdoc[:groups].first[:title]
        %h2#project_tagline= specdoc[:groups].first[:tagline]

    %div#main_content_wrap.outer
      %section#main_content.inner
        - render_groups specdoc[:groups]

